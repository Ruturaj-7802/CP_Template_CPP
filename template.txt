#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define endl '\n'
#define test ll t; cin >> t; while(t--) 
#define vec(ver, n)  vector<ll> ver(n); for (ll i = 0; i < n; i++) cin >> ver[i];
#define pb push_back
#define all(x) (x).begin(),(x).end()
bool pow2(ll n)
{
    if(n==0) return false;
    return (ceil(log2(n)) == floor(log2(n)));
}
const int32_t N=1e5+10;
const long long INF=1e18 + 2;
const long long _INF=-1e18;
const int mod1=998244353;
const int mod=1000000007;


ll bin_expo(ll x, ll y) { ll res = 1; while (y) {if (y % 2) res = (res * x % mod) % mod; x = (x * x) % mod; y /= 2; } return res;}
ll mod_inv(ll x) {return bin_expo(x, mod - 2);}
ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}
ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}
ll mod_sub(ll a, ll b) {a = a % mod; b = b % mod; return (((a - b) % mod) + mod) % mod;}
ll mod_div(ll a, ll b) {a = a % mod; b = b % mod; return (mod_mul(a, mod_inv(b)) + mod) % mod;}

unsigned long long fac[200000 + 1];//fac[0] = 1;
unsigned long long power(unsigned long long x,int y, int p){
    unsigned long long res = 1; // Initialize result
    x = x % p; // Update x if it is more than or equal to p
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1) res = (res * x) % p;

        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}

// Returns n^(-1) mod p
unsigned long long modInverse(unsigned long long n,int p){ return power(n, p - 2, p); }
// Returns nCr % p using Fermat's little theorem.

unsigned long long nCrModPFermat(unsigned long long n,int r, int p)
{
    if (n < r) return 0; // If n<r, then nCr should return 0
    if (r == 0) return 1; // Base case
    return (fac[n] * modInverse(fac[r], p) % p* modInverse(fac[n - r], p) % p)% p;
}

signed main(){
    fastio
    //fac[0] = 1;
    //for(int i = 1; i<= 200000; i++){
    //	fac[i] = (fac[i-1]*i) % mod;
    //}
    test{
              
    }  
    return 0;
}
